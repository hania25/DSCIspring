{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fc75be87",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "hania raslan \n",
    "ID: 900203676\n",
    "\n",
    "Assignment 2 \n",
    "\n",
    " these codes are intended to calculate confidence intervals for 2 data sets and analyze the resons behind the probabilities of winning lossing in the first data dues to deveral variables (playing home, away)\n",
    "and for the secound data the probability of having being diagnozed with covid-19 due to several results such as income.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "371aacfc",
   "metadata": {},
   "source": [
    "#part 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 649,
   "id": "1522d53b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy\n",
    "import scipy.stats\n",
    "from scipy.stats import norm,t\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.stats.proportion import proportion_confint\n",
    "import matplotlib.pyplot as plt\n",
    "from pandas.api.types import CategoricalDtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "id": "cfad643a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>home_team</th>\n",
       "      <th>away_team</th>\n",
       "      <th>home_score</th>\n",
       "      <th>away_score</th>\n",
       "      <th>tournament</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>neutral</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1872-11-30</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1873-03-08</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1874-03-07</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1875-03-06</td>\n",
       "      <td>England</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>London</td>\n",
       "      <td>England</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1876-03-04</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>England</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Glasgow</td>\n",
       "      <td>Scotland</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43183</th>\n",
       "      <td>2/1/2022</td>\n",
       "      <td>Suriname</td>\n",
       "      <td>Guyana</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Friendly</td>\n",
       "      <td>Paramaribo</td>\n",
       "      <td>Suriname</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43184</th>\n",
       "      <td>2/2/2022</td>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>Senegal</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>African Cup of Nations</td>\n",
       "      <td>Yaoundé</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43185</th>\n",
       "      <td>2/3/2022</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>Egypt</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>African Cup of Nations</td>\n",
       "      <td>Yaoundé</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43186</th>\n",
       "      <td>2/5/2022</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>African Cup of Nations</td>\n",
       "      <td>Yaoundé</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43187</th>\n",
       "      <td>2/6/2022</td>\n",
       "      <td>Senegal</td>\n",
       "      <td>Egypt</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>African Cup of Nations</td>\n",
       "      <td>Yaoundé</td>\n",
       "      <td>Cameroon</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>43188 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             date     home_team     away_team  home_score  away_score  \\\n",
       "0      1872-11-30      Scotland       England           0           0   \n",
       "1      1873-03-08       England      Scotland           4           2   \n",
       "2      1874-03-07      Scotland       England           2           1   \n",
       "3      1875-03-06       England      Scotland           2           2   \n",
       "4      1876-03-04      Scotland       England           3           0   \n",
       "...           ...           ...           ...         ...         ...   \n",
       "43183    2/1/2022      Suriname        Guyana           2           1   \n",
       "43184    2/2/2022  Burkina Faso       Senegal           1           3   \n",
       "43185    2/3/2022      Cameroon         Egypt           0           0   \n",
       "43186    2/5/2022      Cameroon  Burkina Faso           3           3   \n",
       "43187    2/6/2022       Senegal         Egypt           0           0   \n",
       "\n",
       "                   tournament        city   country  neutral  \n",
       "0                    Friendly     Glasgow  Scotland    False  \n",
       "1                    Friendly      London   England    False  \n",
       "2                    Friendly     Glasgow  Scotland    False  \n",
       "3                    Friendly      London   England    False  \n",
       "4                    Friendly     Glasgow  Scotland    False  \n",
       "...                       ...         ...       ...      ...  \n",
       "43183                Friendly  Paramaribo  Suriname    False  \n",
       "43184  African Cup of Nations     Yaoundé  Cameroon     True  \n",
       "43185  African Cup of Nations     Yaoundé  Cameroon    False  \n",
       "43186  African Cup of Nations     Yaoundé  Cameroon    False  \n",
       "43187  African Cup of Nations     Yaoundé  Cameroon     True  \n",
       "\n",
       "[43188 rows x 9 columns]"
      ]
     },
     "execution_count": 650,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=pd.read_csv(\"results.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 651,
   "id": "12efbac9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df['home_score']-df['away_score']\n",
    "conditions = [\n",
    "    (x<0),\n",
    "    (x>0),\n",
    "    (x==0)\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 652,
   "id": "1761879d",
   "metadata": {},
   "outputs": [],
   "source": [
    "values= ['win','lose','draw']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 653,
   "id": "0ae4bb42",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['result'] = np.select(conditions, values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "id": "a1c7bf33",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=df['result'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "id": "7892eca6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.array(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "id": "9d0f9afe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([21009, 12224,  9955])"
      ]
     },
     "execution_count": 656,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "id": "9f4c73a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "conditions = [\n",
    "    (df['tournament']=='Friendly'),\n",
    "    (df['tournament']!='Friendly')\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "id": "e4ee38ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "values=['Friendly','Official']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "id": "f8d536cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['typematch'] = np.select(conditions, values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "01e47808",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>result</th>\n",
       "      <th>draw</th>\n",
       "      <th>lose</th>\n",
       "      <th>win</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>typematch</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Friendly</th>\n",
       "      <td>4329</td>\n",
       "      <td>8141</td>\n",
       "      <td>4806</td>\n",
       "      <td>17276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Official</th>\n",
       "      <td>5626</td>\n",
       "      <td>12868</td>\n",
       "      <td>7418</td>\n",
       "      <td>25912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>9955</td>\n",
       "      <td>21009</td>\n",
       "      <td>12224</td>\n",
       "      <td>43188</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "result     draw   lose    win    All\n",
       "typematch                           \n",
       "Friendly   4329   8141   4806  17276\n",
       "Official   5626  12868   7418  25912\n",
       "All        9955  21009  12224  43188"
      ]
     },
     "execution_count": 660,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pd.crosstab(df['typematch'],df['result'],margins=True)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "id": "45be74a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 4329,  8141,  4806, 17276],\n",
       "       [ 5626, 12868,  7418, 25912],\n",
       "       [ 9955, 21009, 12224, 43188]])"
      ]
     },
     "execution_count": 661,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.array(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "id": "00538430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.27150736589666685, 0.2848714254902283)"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_win_friendly=proportion_confint(count=x[0,2],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_win_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "id": "8f7d0cad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.2807729187467606, 0.29178033843138085)"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_win_official=proportion_confint(count=x[1,2],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_win_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "id": "31b9d76e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.271507</td>\n",
       "      <td>0.284871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.280773</td>\n",
       "      <td>0.291780</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch        lb        ub\n",
       "0  Friendly  0.271507  0.284871\n",
       "1  Official  0.280773  0.291780"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_win = {}\n",
    "ci_win['Typematch'] = ['Friendly','Official']\n",
    "ci_win['lb'] = [CI_win_friendly[0],CI_win_official[0]]\n",
    "ci_win['ub'] = [CI_win_friendly[1],CI_win_official[1]]\n",
    "df_ci3= pd.DataFrame(ci_win)\n",
    "df_ci3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "id": "90f1584f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12aa728b0>,\n",
       "  <matplotlib.axis.YTick at 0x12aa72130>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci3['lb'],df_ci3['ub'],range(len(df_ci3))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci3)),list(df_ci3['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "id": "535c4a2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.46378827932197364, 0.47867525390331)"
      ]
     },
     "execution_count": 666,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_lose_friendly=proportion_confint(count=x[0,1],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_lose_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "id": "11a03b33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4905161288707065, 0.5026916513083611)"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_lose_official=proportion_confint(count=x[1,1],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_lose_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "id": "ec9021c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.463788</td>\n",
       "      <td>0.478675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.490516</td>\n",
       "      <td>0.502692</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch        lb        ub\n",
       "0  Friendly  0.463788  0.478675\n",
       "1  Official  0.490516  0.502692"
      ]
     },
     "execution_count": 668,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_lose = {}\n",
    "ci_lose['Typematch'] = ['Friendly','Official']\n",
    "ci_lose['lb'] = [CI_lose_friendly[0],CI_lose_official[0]]\n",
    "ci_lose['ub'] = [CI_lose_friendly[1],CI_lose_official[1]]\n",
    "df_ci4= pd.DataFrame(ci_lose)\n",
    "df_ci4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "id": "c87d7fc4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12ac3b790>,\n",
       "  <matplotlib.axis.YTick at 0x12acc7fd0>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 669,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci4['lb'],df_ci4['ub'],range(len(df_ci4))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci4)),list(df_ci4['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "id": "aa29c7c3",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "United States          1237\n",
       "France                  818\n",
       "Malaysia                744\n",
       "England                 717\n",
       "Sweden                  655\n",
       "                       ... \n",
       "Belgian Congo             1\n",
       "Portuguese Guinea         1\n",
       "Bohemia and Moravia       1\n",
       "Lautoka                   1\n",
       "Mali Federation           1\n",
       "Name: country, Length: 267, dtype: int64"
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['country'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 671,
   "id": "3d082522",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dfus=df[df['country']=='France']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "id": "96d5c502",
   "metadata": {},
   "outputs": [],
   "source": [
    "conditions = [\n",
    "    (dfus['tournament']=='Friendly'),\n",
    "    (dfus['tournament']!='Friendly')\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "88465429",
   "metadata": {},
   "outputs": [],
   "source": [
    "values=['Friendly','Official']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "6cf0df9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/cb/q2vtvk4903596g_cc_f4z09c0000gn/T/ipykernel_97006/327193532.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dfus['Typematch'] = np.select(conditions, values)\n"
     ]
    }
   ],
   "source": [
    "dfus['Typematch'] = np.select(conditions, values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "c8f5e6b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>result</th>\n",
       "      <th>draw</th>\n",
       "      <th>lose</th>\n",
       "      <th>win</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>typematch</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Friendly</th>\n",
       "      <td>112</td>\n",
       "      <td>228</td>\n",
       "      <td>131</td>\n",
       "      <td>471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Official</th>\n",
       "      <td>77</td>\n",
       "      <td>189</td>\n",
       "      <td>81</td>\n",
       "      <td>347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>189</td>\n",
       "      <td>417</td>\n",
       "      <td>212</td>\n",
       "      <td>818</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "result     draw  lose  win  All\n",
       "typematch                      \n",
       "Friendly    112   228  131  471\n",
       "Official     77   189   81  347\n",
       "All         189   417  212  818"
      ]
     },
     "execution_count": 675,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z=pd.crosstab(dfus['typematch'],dfus['result'],margins=True)\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "id": "40f9ca42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[112, 228, 131, 471],\n",
       "       [ 77, 189,  81, 347],\n",
       "       [189, 417, 212, 818]])"
      ]
     },
     "execution_count": 676,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z=np.array(z)\n",
    "z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "id": "798f518c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.22959939266607973, 0.30122252514213943)"
      ]
     },
     "execution_count": 677,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francewin_friendly=proportion_confint(count=z[1,2],nobs=z[1,3],alpha=(1-.95))\n",
    "CI_uswin_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "id": "168bfffe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.3096072474351973, 0.38258264536725295)"
      ]
     },
     "execution_count": 678,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francewin_official=proportion_confint(count=z[0,2],nobs=z[0,3],alpha=(1-.95))\n",
    "CI_uswin_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 679,
   "id": "16e9c265",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.188921</td>\n",
       "      <td>0.277937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.237665</td>\n",
       "      <td>0.318598</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch        lb        ub\n",
       "0  Friendly  0.188921  0.277937\n",
       "1  Official  0.237665  0.318598"
      ]
     },
     "execution_count": 679,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Francewin = {}\n",
    "ci_Francewin['Typematch'] = ['Friendly','Official']\n",
    "ci_Francewin['lb'] = [CI_Francewin_friendly[0],CI_Francewin_official[0]]\n",
    "ci_Francewin['ub'] = [CI_Francewin_friendly[1],CI_Francewin_official[1]]\n",
    "df_cius= pd.DataFrame(ci_Francewin)\n",
    "df_cius"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 680,
   "id": "8fff2785",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12ab62be0>,\n",
       "  <matplotlib.axis.YTick at 0x12ab62460>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 680,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_cius['lb'],df_cius['ub'],range(len(df_cius))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_cius)),list(df_cius['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 681,
   "id": "b78a46c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.43894415137605935, 0.5292087148659789)"
      ]
     },
     "execution_count": 681,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francelose_friendly=proportion_confint(count=z[0,1],nobs=z[0,3],alpha=(1-.95))\n",
    "CI_Francelose_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "id": "418f6787",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4922707551354989, 0.5970664206570083)"
      ]
     },
     "execution_count": 682,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francelose_official=proportion_confint(count=z[1,1],nobs=z[1,3],alpha=(1-.95))\n",
    "CI_Francelose_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "id": "c64062ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.438944</td>\n",
       "      <td>0.529209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.492271</td>\n",
       "      <td>0.597066</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch        lb        ub\n",
       "0  Friendly  0.438944  0.529209\n",
       "1  Official  0.492271  0.597066"
      ]
     },
     "execution_count": 683,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Francelose = {}\n",
    "ci_Francelose['Typematch'] = ['Friendly','Official']\n",
    "ci_Francelose['lb'] = [CI_Francelose_friendly[0],CI_Francelose_official[0]]\n",
    "ci_Francelose['ub'] = [CI_Francelose_friendly[1],CI_Francelose_official[1]]\n",
    "df_ciFrance= pd.DataFrame(ci_Francelose)\n",
    "df_ciFrance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "id": "4030e217",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x129ef9ac0>,\n",
       "  <matplotlib.axis.YTick at 0x129ef9340>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 684,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_cius['lb'],df_ciFrance['ub'],range(len(df_ciFrance))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ciFrance)),list(df_ciFrance['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 685,
   "id": "c73ba00b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/cb/q2vtvk4903596g_cc_f4z09c0000gn/T/ipykernel_97006/2708661334.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dfus['home']=(dfus['home_team']=='France')\n"
     ]
    }
   ],
   "source": [
    "dfus['home']=(dfus['home_team']=='France')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "id": "70859914",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>result</th>\n",
       "      <th>draw</th>\n",
       "      <th>lose</th>\n",
       "      <th>win</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>100</td>\n",
       "      <td>157</td>\n",
       "      <td>118</td>\n",
       "      <td>375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>89</td>\n",
       "      <td>260</td>\n",
       "      <td>94</td>\n",
       "      <td>443</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>189</td>\n",
       "      <td>417</td>\n",
       "      <td>212</td>\n",
       "      <td>818</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "result  draw  lose  win  All\n",
       "home                        \n",
       "False    100   157  118  375\n",
       "True      89   260   94  443\n",
       "All      189   417  212  818"
      ]
     },
     "execution_count": 686,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pd.crosstab(dfus['home'],dfus['result'],margins=True)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "id": "1c4b7081",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[100, 157, 118, 375],\n",
       "       [ 89, 260,  94, 443],\n",
       "       [189, 417, 212, 818]])"
      ]
     },
     "execution_count": 687,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.array(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 688,
   "id": "e557a64d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17411643713822142, 0.2502627953674219)"
      ]
     },
     "execution_count": 688,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francewin_home=proportion_confint(count=x[1,2],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_Francewin_home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "id": "8c1982ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.2676654873825878, 0.3616678459507455)"
      ]
     },
     "execution_count": 689,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francewin_away=proportion_confint(count=x[0,2],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_Francewin_away"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "id": "29a0b8eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Yes</td>\n",
       "      <td>0.174116</td>\n",
       "      <td>0.250263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>0.267665</td>\n",
       "      <td>0.361668</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  home        lb        ub\n",
       "0  Yes  0.174116  0.250263\n",
       "1   No  0.267665  0.361668"
      ]
     },
     "execution_count": 690,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Francewin = {}\n",
    "ci_Francewin['home'] = ['Yes','No']\n",
    "ci_Francewin['lb'] = [CI_Francewin_home[0],CI_Francewin_away[0]]\n",
    "ci_Francewin['ub'] = [CI_Francewin_home[1],CI_Francewin_away[1]]\n",
    "df_ci= pd.DataFrame(ci_Francewin)\n",
    "df_ci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "id": "f5173e10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12ac0cf70>,\n",
       "  <matplotlib.axis.YTick at 0x12ac0c7f0>],\n",
       " [Text(0, 0, 'Yes'), Text(0, 1, 'No')])"
      ]
     },
     "execution_count": 691,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci['lb'],df_ci['ub'],range(len(df_ci))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci)),list(df_ci['home']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "id": "cf0c24ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.541055825404375, 0.6327590730154896)"
      ]
     },
     "execution_count": 692,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francelose_home=proportion_confint(count=x[1,1],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_uslose_home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "id": "312dff13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.3696955835778047, 0.4365998159379338)"
      ]
     },
     "execution_count": 693,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Francelose_away=proportion_confint(count=x[0,1],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_uslose_away"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "id": "d5c09b55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Yes</td>\n",
       "      <td>0.541056</td>\n",
       "      <td>0.632759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>0.368735</td>\n",
       "      <td>0.468599</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  home        lb        ub\n",
       "0  Yes  0.541056  0.632759\n",
       "1   No  0.368735  0.468599"
      ]
     },
     "execution_count": 694,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Francelose = {}\n",
    "ci_Francelose['home'] = ['Yes','No']\n",
    "ci_Francelose['lb'] = [CI_Francelose_home[0],CI_Francelose_away[0]]\n",
    "ci_Francelose['ub'] = [CI_Francelose_home[1],CI_Francelose_away[1]]\n",
    "df_ci= pd.DataFrame(ci_Francelose)\n",
    "df_ci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "id": "63e50cf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12b0be5b0>,\n",
       "  <matplotlib.axis.YTick at 0x12b0b8df0>],\n",
       " [Text(0, 0, 'Yes'), Text(0, 1, 'No')])"
      ]
     },
     "execution_count": 695,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci['lb'],df_ci['ub'],range(len(df_ci))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci)),list(df_ci['home']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "id": "8dded22e",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfMalasia=df[df['country']=='Malaysia']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "id": "351b06db",
   "metadata": {},
   "outputs": [],
   "source": [
    "conditions = [\n",
    "    (dfMalasia['tournament']=='Friendly'),\n",
    "    (dfMalasia['tournament']!='Friendly')\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "id": "6ec63ff0",
   "metadata": {},
   "outputs": [],
   "source": [
    "values=['Friendly','Official']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "id": "0b8c76ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/cb/q2vtvk4903596g_cc_f4z09c0000gn/T/ipykernel_97006/2384083297.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dfMalasia['Typematch'] = np.select(conditions, values)\n"
     ]
    }
   ],
   "source": [
    "dfMalasia['Typematch'] = np.select(conditions, values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "id": "5cce4104",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>result</th>\n",
       "      <th>draw</th>\n",
       "      <th>lose</th>\n",
       "      <th>win</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>typematch</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Friendly</th>\n",
       "      <td>26</td>\n",
       "      <td>38</td>\n",
       "      <td>23</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Official</th>\n",
       "      <td>147</td>\n",
       "      <td>306</td>\n",
       "      <td>204</td>\n",
       "      <td>657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>173</td>\n",
       "      <td>344</td>\n",
       "      <td>227</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "result     draw  lose  win  All\n",
       "typematch                      \n",
       "Friendly     26    38   23   87\n",
       "Official    147   306  204  657\n",
       "All         173   344  227  744"
      ]
     },
     "execution_count": 700,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pd.crosstab(dfMalasia['typematch'],dfMalasia['result'],margins=True)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "id": "185ef779",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 26,  38,  23,  87],\n",
       "       [147, 306, 204, 657],\n",
       "       [173, 344, 227, 744]])"
      ]
     },
     "execution_count": 701,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.array(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 702,
   "id": "c7455269",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.2751217623066649, 0.3458828039033807)"
      ]
     },
     "execution_count": 702,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasiawin_friendly=proportion_confint(count=x[1,2],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_Malasiawin_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "id": "f44872f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.17170123991784997, 0.3570343922660581)"
      ]
     },
     "execution_count": 703,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasiawin_official=proportion_confint(count=x[0,2],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_Malasiawin_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "id": "dcdabf78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.275122</td>\n",
       "      <td>0.345883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.171701</td>\n",
       "      <td>0.357034</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch        lb        ub\n",
       "0  Friendly  0.275122  0.345883\n",
       "1  Official  0.171701  0.357034"
      ]
     },
     "execution_count": 704,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Malasiawin = {}\n",
    "ci_Malasiawin['Typematch'] = ['Friendly','Official']\n",
    "ci_Malasiawin['lb'] = [CI_Malasiawin_friendly[0],CI_Malasiawin_official[0]]\n",
    "ci_Malasiawin['ub'] = [CI_Malasiawin_friendly[1],CI_Malasiawin_official[1]]\n",
    "df_Malasia= pd.DataFrame(ci_Malasiawin)\n",
    "df_Malasia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "id": "36d65ce0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12abb2b50>,\n",
       "  <matplotlib.axis.YTick at 0x12abb2a00>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 705,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAD4CAYAAAAdIcpQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAANu0lEQVR4nO3df4xld1nH8fezYJdOF5S6IJV2Z7BKq2hp66K1bUiaYkIbdEtslGQUtcYVRIUmKI0KNpj9A5RojYFk2kh/ZAoJSkUrJcWGFcOypLO4bK38aBd3V6D0F5C6LtmS5fGPc7a9O9w7z70zd+ae6b5fyc0993vPOfPM937nfOb8mDmRmUiStJQNky5AktR9hoUkqWRYSJJKhoUkqWRYSJJKz550Aatl8+bNOTMzM+kyJGld2bNnz2OZ+YLF7c/YsJiZmWFhYWHSZUjSuhIRB/u1exhKklQyLCRJJcNCklQyLCRJJcNCklRaVlhExJkR8ZGIeCAi9kfEDRFxSvveByJiX0RcGxHnRsTeiPiPiDg7InYV631nRLyqmOfmiLh6OXWX5udhZgY2bGie5+dX5ctI0tit8vZr5LCIiAA+DPxjZv4Y8FJgE7AjIl4EXJyZ52XmXwFXAR/JzAsyc39mXrzUujPzHZn5ryN/F+MwPw/bt8PBg5DZPG/fbmBI6r412H7FqP+iPCIuB/4sM1/Z0/Y84L+Bx4GzgC8CdwBvBI4BX8rMyyLicGZuapf5I+DXgO8Cd2XmdRFxM3BnZv59RLwD+AXgVGAX8DuZmb3zLFXn1q1bc6S/s5iZaTp4sY0b4aKLhl+PJK213bvh6NHvbZ+ehgMHRlpVROzJzK2L25fzR3kvA/b0NmTmExFxCPh14PbMPL/9ogEczsy/XFTMFTR7HT+bmUci4vQ+X+dvM/Od7fy3Aa8B/nmpwiJiO7AdYMuWLaN9V4cO9W/v9wFIUpcM2k4N2q4tw3LCIoB+uyOD2vt5FfD+zDwCkJnf6DPPZe3exxRwOnA/RVhk5hwwB82exZC1NLZs6b9nMT0NO3eOtCpJWlODjoyM+kvzEpZzgvt+4IRdlPYw1Fk0h5yGsWSwRMRzgPcCV2fmTwE3As9ZRq3D27EDpqZObJuaatolqcvWYPu1nLC4B5iKiNcDRMSzgPcANwNHhlzH3cA1ETHVrmPxYajjwfBYRGwCVufqp16zszA31+xJRDTPc3NNuyR12Rpsv0Y+DNWeZH4t8N6IeDtN4HwU+GPgjCHX8bGIOB9YiIgne5Y//v63IuJG4D7gAHDvqHUuy+ys4SBpfVrl7dfIV0OtFyNfDSVJGng1lH/BLUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkqGRaSpJJhIUkq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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_Malasia['lb'],df_Malasia['ub'],range(len(df_Malasia))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_Malasia)),list(df_Malasia['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 706,
   "id": "adc17b27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.3325596937938109, 0.5410035245969937)"
      ]
     },
     "execution_count": 706,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasialose_friendly=proportion_confint(count=x[0,1],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_Malasialose_friendly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 707,
   "id": "608a55cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.42761047206364666, 0.5038963772514218)"
      ]
     },
     "execution_count": 707,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasialose_official=proportion_confint(count=x[1,1],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_Malasialose_official"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 708,
   "id": "32e4936e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Typematch</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Friendly</td>\n",
       "      <td>0.33256</td>\n",
       "      <td>0.541004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Official</td>\n",
       "      <td>0.42761</td>\n",
       "      <td>0.503896</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Typematch       lb        ub\n",
       "0  Friendly  0.33256  0.541004\n",
       "1  Official  0.42761  0.503896"
      ]
     },
     "execution_count": 708,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Malasialose = {}\n",
    "ci_Malasialose['Typematch'] = ['Friendly','Official']\n",
    "ci_Malasialose['lb'] = [CI_Malasialose_friendly[0],CI_Malasialose_official[0]]\n",
    "ci_Malasialose['ub'] = [CI_Malasialose_friendly[1],CI_Malasialose_official[1]]\n",
    "df_ciMalasia= pd.DataFrame(ci_Malasialose)\n",
    "df_ciMalasia"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 709,
   "id": "494a9ccd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12b20d850>,\n",
       "  <matplotlib.axis.YTick at 0x12b20d0d0>],\n",
       " [Text(0, 0, 'Friendly'), Text(0, 1, 'Official')])"
      ]
     },
     "execution_count": 709,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZQAAAD4CAYAAADLhBA1AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAMiElEQVR4nO3dfYxld13H8c+3IIVtNYYURYHdQeRBUSy6YAFDIGCCBAOERkhW0ZC4ioqEP1SiggbTP0w0ijFIFqIVspXEh0KsBUG0YiA17CoPYkABtxWJ0kqUrCUFytc/7m07u8zuPH1nZ2Z5vZKbmTn3nDu/+7tn7nvPuXdnqrsDANt1yW4PAICLg6AAMEJQABghKACMEBQARtx3twewU6644opeWVnZ7WEA7CsnT568vbsftJVtL9qgrKys5MSJE7s9DIB9papu2eq2TnkBMEJQABghKACMEBQARggKACO2FJSqemhVva2q/rWqPlFVr62q+y2v+6Oq+lBVvaKqHlNVH6iqf6yqR1TV+9a53ddU1TPXWefaqrp6K+OGMcePJysrySWXLD4eP77bI2KjPHY7ZtNBqapK8mdJ3trdj0zyqCSXJ7mmqh6c5Mnd/bju/q0kz0vytu5+fHd/oruffL7b7u5Xd/dfbfpewIV0/Hhy9Ghyyy1J9+Lj0aOemPYDj92Oqs3++vqqekaSX+nup65a9nVJ/i3Jfyd5WJKPJbk+yUuT3JXkX7r76VV1ursvX27z80l+JMmXk7y9u19ZVdcmuaG7/6SqXp3kB5M8IMn7kvxEd/fqdc43zsOHD7f/h8KOWFlZPBGd7dJLk6uuuuDDYRNuvjm5886vXH7oUHLq1AUfzl5UVSe7+/BWtt3Kf2x8bJKTqxd09+eq6tYkP5rkuu6+cjmwSnK6u3/jrAH/QBZHL9/b3XdU1QPX+D6/292vWa7/5iTPSfLn5xtYVR1NcjRJDh48uPl7Bhtx661rL1/riYq95VyP0bkeUzZlK0GpJGsd1pxr+VqemeQPuvuOJOnuz66xztOXRzEHkjwwyUeyTlC6+1iSY8niCGWDY4HNOXhw7SOUQ4eSm2664MNhE851dOkfoCO28qL8R5KccTi0POX1sCxOb23EeeNTVfdP8rokV3f3dyZ5Q5L7b2GsMO+aa5IDB85cduDAYjl7m8duR20lKO9OcqCqXpwkVXWfJL+Z5Nokd2zwNt6Z5CVVdWB5G2ef8ro7HrdX1eVJvKuLvePIkeTYscURSdXi47Fji+XsbR67HbXpU17LF8afn+R1VfWqLKJ0Y5JfTPJNG7yNd1TVlUlOVNUXVm1/9/X/U1VvSPLhJKeSvH+z44QddeSIJ6H9ymO3Yzb9Lq/9wru8ADZvO+/y8j/lARghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBGCAsAIQQFghKAAMEJQABghKACMEBQARggKACMEBYARggLACEEBYISgADBCUAAYISgAjBAUAEYICgAjBAWAEYICwAhBAWCEoAAwQlAAGCEoAIwQFABGCAoAIwQFgBHrBqWq7qqqD6y6rKyxzo1V9fUTA6qq08uPK1X1TxO3uWHH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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ciMalasia['lb'],df_ciMalasia['ub'],range(len(df_ciMalasia))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ciMalasia)),list(df_ciMalasia['Typematch']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "id": "34a6c7b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/cb/q2vtvk4903596g_cc_f4z09c0000gn/T/ipykernel_97006/4109911809.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  dfMalasia['home']=(dfMalasia['home_team']=='Malasia')\n"
     ]
    }
   ],
   "source": [
    "dfMalasia['home']=(dfMalasia['home_team']=='Malasia')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "id": "da8e1b9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>result</th>\n",
       "      <th>draw</th>\n",
       "      <th>lose</th>\n",
       "      <th>win</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>home</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>173</td>\n",
       "      <td>344</td>\n",
       "      <td>227</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>173</td>\n",
       "      <td>344</td>\n",
       "      <td>227</td>\n",
       "      <td>744</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "result  draw  lose  win  All\n",
       "home                        \n",
       "False    173   344  227  744\n",
       "All      173   344  227  744"
      ]
     },
     "execution_count": 711,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=pd.crosstab(dfMalasia['home'],dfMalasia['result'],margins=True)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "id": "55146078",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[173, 344, 227, 744],\n",
       "       [173, 344, 227, 744]])"
      ]
     },
     "execution_count": 712,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=np.array(x)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "id": "59cc5923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.27202132709522614, 0.33819372666821473)"
      ]
     },
     "execution_count": 713,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasiawin_home=proportion_confint(count=x[1,2],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_Malasiawin_home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "id": "f7229e1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.27202132709522614, 0.33819372666821473)"
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasiawin_away=proportion_confint(count=x[0,2],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_Malasiawin_away"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "id": "783e5df1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Yes</td>\n",
       "      <td>0.272021</td>\n",
       "      <td>0.338194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>0.272021</td>\n",
       "      <td>0.338194</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  home        lb        ub\n",
       "0  Yes  0.272021  0.338194\n",
       "1   No  0.272021  0.338194"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Malasiawin = {}\n",
    "ci_Malasiawin['home'] = ['Yes','No']\n",
    "ci_Malasiawin['lb'] = [CI_Malasiawin_home[0],CI_Malasiawin_away[0]]\n",
    "ci_Malasiawin['ub'] = [CI_Malasiawin_home[1],CI_Malasiawin_away[1]]\n",
    "df_ci= pd.DataFrame(ci_Malasiawin)\n",
    "df_ci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "id": "c484d5c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12b628fa0>,\n",
       "  <matplotlib.axis.YTick at 0x12b628e20>],\n",
       " [Text(0, 0, 'Yes'), Text(0, 1, 'No')])"
      ]
     },
     "execution_count": 716,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci['lb'],df_ci['ub'],range(len(df_ci))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci)),list(df_ci['home']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "id": "79c76487",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4265396257901046, 0.49819155700559425)"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasialose_home=proportion_confint(count=x[1,1],nobs=x[1,3],alpha=(1-.95))\n",
    "CI_Malasialose_home"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "id": "60ac5749",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.4265396257901046, 0.49819155700559425)"
      ]
     },
     "execution_count": 718,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "CI_Malasialose_away=proportion_confint(count=x[0,1],nobs=x[0,3],alpha=(1-.95))\n",
    "CI_Malasialose_away"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "id": "60a6d56d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>home</th>\n",
       "      <th>lb</th>\n",
       "      <th>ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Yes</td>\n",
       "      <td>0.541056</td>\n",
       "      <td>0.632759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>No</td>\n",
       "      <td>0.369696</td>\n",
       "      <td>0.436600</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  home        lb        ub\n",
       "0  Yes  0.541056  0.632759\n",
       "1   No  0.369696  0.436600"
      ]
     },
     "execution_count": 719,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci_Malasialose = {}\n",
    "ci_Malasialose['home'] = ['Yes','No']\n",
    "ci_Malasialose['lb'] = [CI_uslose_home[0],CI_uslose_away[0]]\n",
    "ci_Malasialose['ub'] = [CI_uslose_home[1],CI_uslose_away[1]]\n",
    "df_ci= pd.DataFrame(ci_Malasialose)\n",
    "df_ci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "id": "36a32c7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([<matplotlib.axis.YTick at 0x12b70cb80>,\n",
       "  <matplotlib.axis.YTick at 0x12b70c400>],\n",
       " [Text(0, 0, 'Yes'), Text(0, 1, 'No')])"
      ]
     },
     "execution_count": 720,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for lb,ub,y in zip(df_ci['lb'],df_ci['ub'],range(len(df_ci))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(df_ci)),list(df_ci['home']))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57c4c1fa",
   "metadata": {},
   "source": [
    "#conclusion\n",
    "the previous codes were calculating the confedence interval for winning or losing both frendly and official matches. the first confidence interval was genaralized to all countries in the data, having a huge gab between the confidence interval of official and friendly matches between all the countries in general which is also the case for malasia and france.he range of the interval for winning an official match is less than a friendly match."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ada6f298",
   "metadata": {},
   "source": [
    "#part 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "id": "34cabb80",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>iso3c</th>\n",
       "      <th>country</th>\n",
       "      <th>income</th>\n",
       "      <th>region</th>\n",
       "      <th>continent</th>\n",
       "      <th>dcases</th>\n",
       "      <th>ddeaths</th>\n",
       "      <th>population</th>\n",
       "      <th>weekdays</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-02-24</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Mon</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-26</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Wed</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-27</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Thu</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-28</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Feb</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122838</th>\n",
       "      <td>2021-12-27</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1098</td>\n",
       "      <td>17</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Mon</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122839</th>\n",
       "      <td>2021-12-28</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>2099</td>\n",
       "      <td>32</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122840</th>\n",
       "      <td>2021-12-29</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Wed</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122841</th>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>4180</td>\n",
       "      <td>57</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Thu</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122842</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1530</td>\n",
       "      <td>7</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Dec</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>122843 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              date iso3c      country               income  \\\n",
       "0       2020-02-24   AFG  Afghanistan           Low income   \n",
       "1       2020-02-25   AFG  Afghanistan           Low income   \n",
       "2       2020-02-26   AFG  Afghanistan           Low income   \n",
       "3       2020-02-27   AFG  Afghanistan           Low income   \n",
       "4       2020-02-28   AFG  Afghanistan           Low income   \n",
       "...            ...   ...          ...                  ...   \n",
       "122838  2021-12-27   ZWE     Zimbabwe  Lower middle income   \n",
       "122839  2021-12-28   ZWE     Zimbabwe  Lower middle income   \n",
       "122840  2021-12-29   ZWE     Zimbabwe  Lower middle income   \n",
       "122841  2021-12-30   ZWE     Zimbabwe  Lower middle income   \n",
       "122842  2021-12-31   ZWE     Zimbabwe  Lower middle income   \n",
       "\n",
       "                    region continent  dcases  ddeaths  population weekdays  \\\n",
       "0               South Asia      Asia       5        0    38041754      Mon   \n",
       "1               South Asia      Asia       0        0    38041754      Tue   \n",
       "2               South Asia      Asia       0        0    38041754      Wed   \n",
       "3               South Asia      Asia       0        0    38041754      Thu   \n",
       "4               South Asia      Asia       0        0    38041754      Fri   \n",
       "...                    ...       ...     ...      ...         ...      ...   \n",
       "122838  Sub-Saharan Africa    Africa    1098       17    14645468      Mon   \n",
       "122839  Sub-Saharan Africa    Africa    2099       32    14645468      Tue   \n",
       "122840  Sub-Saharan Africa    Africa       0        0    14645468      Wed   \n",
       "122841  Sub-Saharan Africa    Africa    4180       57    14645468      Thu   \n",
       "122842  Sub-Saharan Africa    Africa    1530        7    14645468      Fri   \n",
       "\n",
       "       month  \n",
       "0        Feb  \n",
       "1        Feb  \n",
       "2        Feb  \n",
       "3        Feb  \n",
       "4        Feb  \n",
       "...      ...  \n",
       "122838   Dec  \n",
       "122839   Dec  \n",
       "122840   Dec  \n",
       "122841   Dec  \n",
       "122842   Dec  \n",
       "\n",
       "[122843 rows x 11 columns]"
      ]
     },
     "execution_count": 721,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1=pd.read_csv('covid_data.csv',encoding='latin-1')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "id": "c822b736",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas.api.types import CategoricalDtype\n",
    "cats=['Jan', 'Feb', 'Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']\n",
    "cat_type = CategoricalDtype(categories=cats, ordered=True)\n",
    "df1['month'] = df1['month'].astype(cat_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "id": "7b0f4a62",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_ci_lb(x, alpha=0.05):\n",
    "    sample_s=np.std(x)\n",
    "    sample_mean=np.mean(x)\n",
    "    sample_size=len(x)\n",
    "    margin_of_error = t.ppf(1 - alpha/2,sample_size-1)*sample_s/np.sqrt(sample_size-1)\n",
    "    return sample_mean - margin_of_error\n",
    "\n",
    "\n",
    "def get_ci_ub(x, alpha=0.05):\n",
    "    sample_s=np.std(x)\n",
    "    sample_mean=np.mean(x)\n",
    "    sample_size=len(x)\n",
    "    margin_of_error = t.ppf(1 - alpha/2,sample_size-1)*sample_s/np.sqrt(sample_size-1)\n",
    "    return sample_mean + margin_of_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "id": "d15923c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2020"
      ]
     },
     "execution_count": 724,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['date'][0]\n",
    "\n",
    "df1['date'] = pd. to_datetime(df1['date'],format='%Y-%m-%d')\n",
    "\n",
    "df1['date'][0]\n",
    "\n",
    "df1['year'] = pd. DatetimeIndex(df1['date']). year\n",
    "\n",
    "df1['year'][0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "id": "66db4ae8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>iso3c</th>\n",
       "      <th>country</th>\n",
       "      <th>income</th>\n",
       "      <th>region</th>\n",
       "      <th>continent</th>\n",
       "      <th>dcases</th>\n",
       "      <th>ddeaths</th>\n",
       "      <th>population</th>\n",
       "      <th>weekdays</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>totdeaths</th>\n",
       "      <th>totcases</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-02-24</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Mon</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-02-25</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-02-26</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Wed</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-02-27</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Thu</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-02-28</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>Low income</td>\n",
       "      <td>South Asia</td>\n",
       "      <td>Asia</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>38041754</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2020</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122838</th>\n",
       "      <td>2021-12-27</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1098</td>\n",
       "      <td>17</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Mon</td>\n",
       "      <td>Dec</td>\n",
       "      <td>2021</td>\n",
       "      <td>4908</td>\n",
       "      <td>205455</td>\n",
       "      <td>0.023888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122839</th>\n",
       "      <td>2021-12-28</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>2099</td>\n",
       "      <td>32</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Tue</td>\n",
       "      <td>Dec</td>\n",
       "      <td>2021</td>\n",
       "      <td>4940</td>\n",
       "      <td>207554</td>\n",
       "      <td>0.023801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122840</th>\n",
       "      <td>2021-12-29</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Wed</td>\n",
       "      <td>Dec</td>\n",
       "      <td>2021</td>\n",
       "      <td>4940</td>\n",
       "      <td>207554</td>\n",
       "      <td>0.023801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122841</th>\n",
       "      <td>2021-12-30</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>4180</td>\n",
       "      <td>57</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Thu</td>\n",
       "      <td>Dec</td>\n",
       "      <td>2021</td>\n",
       "      <td>4997</td>\n",
       "      <td>211734</td>\n",
       "      <td>0.023600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>122842</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>Africa</td>\n",
       "      <td>1530</td>\n",
       "      <td>7</td>\n",
       "      <td>14645468</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Dec</td>\n",
       "      <td>2021</td>\n",
       "      <td>5004</td>\n",
       "      <td>213264</td>\n",
       "      <td>0.023464</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>122843 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             date iso3c      country               income              region  \\\n",
       "0      2020-02-24   AFG  Afghanistan           Low income          South Asia   \n",
       "1      2020-02-25   AFG  Afghanistan           Low income          South Asia   \n",
       "2      2020-02-26   AFG  Afghanistan           Low income          South Asia   \n",
       "3      2020-02-27   AFG  Afghanistan           Low income          South Asia   \n",
       "4      2020-02-28   AFG  Afghanistan           Low income          South Asia   \n",
       "...           ...   ...          ...                  ...                 ...   \n",
       "122838 2021-12-27   ZWE     Zimbabwe  Lower middle income  Sub-Saharan Africa   \n",
       "122839 2021-12-28   ZWE     Zimbabwe  Lower middle income  Sub-Saharan Africa   \n",
       "122840 2021-12-29   ZWE     Zimbabwe  Lower middle income  Sub-Saharan Africa   \n",
       "122841 2021-12-30   ZWE     Zimbabwe  Lower middle income  Sub-Saharan Africa   \n",
       "122842 2021-12-31   ZWE     Zimbabwe  Lower middle income  Sub-Saharan Africa   \n",
       "\n",
       "       continent  dcases  ddeaths  population weekdays month  year  totdeaths  \\\n",
       "0           Asia       5        0    38041754      Mon   Feb  2020          0   \n",
       "1           Asia       0        0    38041754      Tue   Feb  2020          0   \n",
       "2           Asia       0        0    38041754      Wed   Feb  2020          0   \n",
       "3           Asia       0        0    38041754      Thu   Feb  2020          0   \n",
       "4           Asia       0        0    38041754      Fri   Feb  2020          0   \n",
       "...          ...     ...      ...         ...      ...   ...   ...        ...   \n",
       "122838    Africa    1098       17    14645468      Mon   Dec  2021       4908   \n",
       "122839    Africa    2099       32    14645468      Tue   Dec  2021       4940   \n",
       "122840    Africa       0        0    14645468      Wed   Dec  2021       4940   \n",
       "122841    Africa    4180       57    14645468      Thu   Dec  2021       4997   \n",
       "122842    Africa    1530        7    14645468      Fri   Dec  2021       5004   \n",
       "\n",
       "        totcases     ratio  \n",
       "0              5  0.000000  \n",
       "1              5  0.000000  \n",
       "2              5  0.000000  \n",
       "3              5  0.000000  \n",
       "4              5  0.000000  \n",
       "...          ...       ...  \n",
       "122838    205455  0.023888  \n",
       "122839    207554  0.023801  \n",
       "122840    207554  0.023801  \n",
       "122841    211734  0.023600  \n",
       "122842    213264  0.023464  \n",
       "\n",
       "[122843 rows x 15 columns]"
      ]
     },
     "execution_count": 725,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['totdeaths'] = df1.groupby(['iso3c'])['ddeaths'].cumsum()\n",
    "df1['totcases'] = df1.groupby(['iso3c'])['dcases'].cumsum()\n",
    "ratio=df1['totdeaths']/df1['totcases']\n",
    "\n",
    "df1['ratio']=ratio\n",
    "\n",
    "\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "id": "466abcbf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>continent</th>\n",
       "      <th>year</th>\n",
       "      <th colspan=\"5\" halign=\"left\">ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>size</th>\n",
       "      <th>get_ci_lb</th>\n",
       "      <th>get_ci_ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Africa</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.026687</td>\n",
       "      <td>0.036548</td>\n",
       "      <td>15332</td>\n",
       "      <td>0.026109</td>\n",
       "      <td>0.027266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Africa</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.021921</td>\n",
       "      <td>0.013963</td>\n",
       "      <td>19345</td>\n",
       "      <td>0.021725</td>\n",
       "      <td>0.022118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Asia</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.020696</td>\n",
       "      <td>0.042093</td>\n",
       "      <td>14313</td>\n",
       "      <td>0.020006</td>\n",
       "      <td>0.021385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Asia</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.018641</td>\n",
       "      <td>0.032137</td>\n",
       "      <td>16790</td>\n",
       "      <td>0.018155</td>\n",
       "      <td>0.019127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Europe</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.036268</td>\n",
       "      <td>0.037584</td>\n",
       "      <td>13408</td>\n",
       "      <td>0.035632</td>\n",
       "      <td>0.036904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Europe</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.018684</td>\n",
       "      <td>0.009132</td>\n",
       "      <td>15695</td>\n",
       "      <td>0.018541</td>\n",
       "      <td>0.018827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>North America(continent)</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.031719</td>\n",
       "      <td>0.037452</td>\n",
       "      <td>6834</td>\n",
       "      <td>0.030831</td>\n",
       "      <td>0.032607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>North America(continent)</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.020597</td>\n",
       "      <td>0.016344</td>\n",
       "      <td>8395</td>\n",
       "      <td>0.020247</td>\n",
       "      <td>0.020946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Oceania</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.014086</td>\n",
       "      <td>0.017041</td>\n",
       "      <td>1466</td>\n",
       "      <td>0.013213</td>\n",
       "      <td>0.014959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Oceania</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.024448</td>\n",
       "      <td>0.060558</td>\n",
       "      <td>3280</td>\n",
       "      <td>0.022375</td>\n",
       "      <td>0.026521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>South America(continent)</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.041318</td>\n",
       "      <td>0.048541</td>\n",
       "      <td>3605</td>\n",
       "      <td>0.039733</td>\n",
       "      <td>0.042903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>South America(continent)</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.032145</td>\n",
       "      <td>0.021665</td>\n",
       "      <td>4380</td>\n",
       "      <td>0.031504</td>\n",
       "      <td>0.032787</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   continent  year     ratio                             \\\n",
       "                                        mean       std   size get_ci_lb   \n",
       "0                     Africa  2020  0.026687  0.036548  15332  0.026109   \n",
       "1                     Africa  2021  0.021921  0.013963  19345  0.021725   \n",
       "2                       Asia  2020  0.020696  0.042093  14313  0.020006   \n",
       "3                       Asia  2021  0.018641  0.032137  16790  0.018155   \n",
       "4                     Europe  2020  0.036268  0.037584  13408  0.035632   \n",
       "5                     Europe  2021  0.018684  0.009132  15695  0.018541   \n",
       "6   North America(continent)  2020  0.031719  0.037452   6834  0.030831   \n",
       "7   North America(continent)  2021  0.020597  0.016344   8395  0.020247   \n",
       "8                    Oceania  2020  0.014086  0.017041   1466  0.013213   \n",
       "9                    Oceania  2021  0.024448  0.060558   3280  0.022375   \n",
       "10  South America(continent)  2020  0.041318  0.048541   3605  0.039733   \n",
       "11  South America(continent)  2021  0.032145  0.021665   4380  0.031504   \n",
       "\n",
       "              \n",
       "   get_ci_ub  \n",
       "0   0.027266  \n",
       "1   0.022118  \n",
       "2   0.021385  \n",
       "3   0.019127  \n",
       "4   0.036904  \n",
       "5   0.018827  \n",
       "6   0.032607  \n",
       "7   0.020946  \n",
       "8   0.014959  \n",
       "9   0.026521  \n",
       "10  0.042903  \n",
       "11  0.032787  "
      ]
     },
     "execution_count": 726,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cy=df1.groupby(['continent','year']).agg({\"ratio\": [np.mean, np.std, np.size,get_ci_lb,get_ci_ub]})\n",
    "\n",
    "cy=cy.reset_index()\n",
    "\n",
    "cy= pd.DataFrame(cy)\n",
    "\n",
    "cy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "id": "07860e62",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>region</th>\n",
       "      <th>year</th>\n",
       "      <th colspan=\"5\" halign=\"left\">ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>size</th>\n",
       "      <th>get_ci_lb</th>\n",
       "      <th>get_ci_ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.018069</td>\n",
       "      <td>0.031493</td>\n",
       "      <td>6301</td>\n",
       "      <td>0.017291</td>\n",
       "      <td>0.018846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.017975</td>\n",
       "      <td>0.038763</td>\n",
       "      <td>8755</td>\n",
       "      <td>0.017163</td>\n",
       "      <td>0.018787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Europe &amp; Central Asia</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.033002</td>\n",
       "      <td>0.035703</td>\n",
       "      <td>15743</td>\n",
       "      <td>0.032445</td>\n",
       "      <td>0.033560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Europe &amp; Central Asia</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.017664</td>\n",
       "      <td>0.008990</td>\n",
       "      <td>18615</td>\n",
       "      <td>0.017535</td>\n",
       "      <td>0.017793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Latin America &amp; Caribbean</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.034462</td>\n",
       "      <td>0.042633</td>\n",
       "      <td>9750</td>\n",
       "      <td>0.033615</td>\n",
       "      <td>0.035308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Latin America &amp; Caribbean</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.024916</td>\n",
       "      <td>0.019643</td>\n",
       "      <td>12045</td>\n",
       "      <td>0.024565</td>\n",
       "      <td>0.025266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Middle East &amp; North Africa</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.030629</td>\n",
       "      <td>0.055039</td>\n",
       "      <td>6415</td>\n",
       "      <td>0.029282</td>\n",
       "      <td>0.031976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Middle East &amp; North Africa</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.027900</td>\n",
       "      <td>0.045152</td>\n",
       "      <td>7665</td>\n",
       "      <td>0.026889</td>\n",
       "      <td>0.028911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>North America(region)</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.043134</td>\n",
       "      <td>0.027639</td>\n",
       "      <td>689</td>\n",
       "      <td>0.041067</td>\n",
       "      <td>0.045201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>North America(region)</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.018626</td>\n",
       "      <td>0.003123</td>\n",
       "      <td>730</td>\n",
       "      <td>0.018399</td>\n",
       "      <td>0.018853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>South Asia</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.012519</td>\n",
       "      <td>0.014289</td>\n",
       "      <td>2541</td>\n",
       "      <td>0.011963</td>\n",
       "      <td>0.013075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>South Asia</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.015800</td>\n",
       "      <td>0.013016</td>\n",
       "      <td>2920</td>\n",
       "      <td>0.015328</td>\n",
       "      <td>0.016273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.025935</td>\n",
       "      <td>0.037687</td>\n",
       "      <td>13519</td>\n",
       "      <td>0.025300</td>\n",
       "      <td>0.026570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.021236</td>\n",
       "      <td>0.013592</td>\n",
       "      <td>17155</td>\n",
       "      <td>0.021033</td>\n",
       "      <td>0.021439</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        region  year     ratio                             \\\n",
       "                                          mean       std   size get_ci_lb   \n",
       "0          East Asia & Pacific  2020  0.018069  0.031493   6301  0.017291   \n",
       "1          East Asia & Pacific  2021  0.017975  0.038763   8755  0.017163   \n",
       "2        Europe & Central Asia  2020  0.033002  0.035703  15743  0.032445   \n",
       "3        Europe & Central Asia  2021  0.017664  0.008990  18615  0.017535   \n",
       "4    Latin America & Caribbean  2020  0.034462  0.042633   9750  0.033615   \n",
       "5    Latin America & Caribbean  2021  0.024916  0.019643  12045  0.024565   \n",
       "6   Middle East & North Africa  2020  0.030629  0.055039   6415  0.029282   \n",
       "7   Middle East & North Africa  2021  0.027900  0.045152   7665  0.026889   \n",
       "8        North America(region)  2020  0.043134  0.027639    689  0.041067   \n",
       "9        North America(region)  2021  0.018626  0.003123    730  0.018399   \n",
       "10                  South Asia  2020  0.012519  0.014289   2541  0.011963   \n",
       "11                  South Asia  2021  0.015800  0.013016   2920  0.015328   \n",
       "12          Sub-Saharan Africa  2020  0.025935  0.037687  13519  0.025300   \n",
       "13          Sub-Saharan Africa  2021  0.021236  0.013592  17155  0.021033   \n",
       "\n",
       "              \n",
       "   get_ci_ub  \n",
       "0   0.018846  \n",
       "1   0.018787  \n",
       "2   0.033560  \n",
       "3   0.017793  \n",
       "4   0.035308  \n",
       "5   0.025266  \n",
       "6   0.031976  \n",
       "7   0.028911  \n",
       "8   0.045201  \n",
       "9   0.018853  \n",
       "10  0.013075  \n",
       "11  0.016273  \n",
       "12  0.026570  \n",
       "13  0.021439  "
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ry=df1.groupby(['region','year']).agg({\"ratio\": [np.mean, np.std, np.size,get_ci_lb,get_ci_ub]})\n",
    "\n",
    "ry=ry.reset_index()\n",
    "\n",
    "ry= pd.DataFrame(ry)\n",
    "\n",
    "ry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "id": "58ed9529",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>income</th>\n",
       "      <th>year</th>\n",
       "      <th colspan=\"5\" halign=\"left\">ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>size</th>\n",
       "      <th>get_ci_lb</th>\n",
       "      <th>get_ci_ub</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>High income</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.030809</td>\n",
       "      <td>0.036505</td>\n",
       "      <td>17865</td>\n",
       "      <td>0.030274</td>\n",
       "      <td>0.031344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>High income</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.014761</td>\n",
       "      <td>0.008120</td>\n",
       "      <td>20937</td>\n",
       "      <td>0.014651</td>\n",
       "      <td>0.014871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Low income</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.034335</td>\n",
       "      <td>0.049796</td>\n",
       "      <td>8351</td>\n",
       "      <td>0.033267</td>\n",
       "      <td>0.035403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Low income</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.030097</td>\n",
       "      <td>0.038303</td>\n",
       "      <td>10585</td>\n",
       "      <td>0.029367</td>\n",
       "      <td>0.030826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.024933</td>\n",
       "      <td>0.041938</td>\n",
       "      <td>12879</td>\n",
       "      <td>0.024209</td>\n",
       "      <td>0.025658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lower middle income</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.023069</td>\n",
       "      <td>0.029529</td>\n",
       "      <td>16653</td>\n",
       "      <td>0.022620</td>\n",
       "      <td>0.023517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Upper middle income</td>\n",
       "      <td>2020</td>\n",
       "      <td>0.026463</td>\n",
       "      <td>0.033877</td>\n",
       "      <td>15863</td>\n",
       "      <td>0.025936</td>\n",
       "      <td>0.026990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Upper middle income</td>\n",
       "      <td>2021</td>\n",
       "      <td>0.020924</td>\n",
       "      <td>0.017922</td>\n",
       "      <td>19710</td>\n",
       "      <td>0.020673</td>\n",
       "      <td>0.021174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                income  year     ratio                                     \n",
       "                                  mean       std   size get_ci_lb get_ci_ub\n",
       "0          High income  2020  0.030809  0.036505  17865  0.030274  0.031344\n",
       "1          High income  2021  0.014761  0.008120  20937  0.014651  0.014871\n",
       "2           Low income  2020  0.034335  0.049796   8351  0.033267  0.035403\n",
       "3           Low income  2021  0.030097  0.038303  10585  0.029367  0.030826\n",
       "4  Lower middle income  2020  0.024933  0.041938  12879  0.024209  0.025658\n",
       "5  Lower middle income  2021  0.023069  0.029529  16653  0.022620  0.023517\n",
       "6  Upper middle income  2020  0.026463  0.033877  15863  0.025936  0.026990\n",
       "7  Upper middle income  2021  0.020924  0.017922  19710  0.020673  0.021174"
      ]
     },
     "execution_count": 728,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iy=df1.groupby(['income','year']).agg({\"ratio\": [np.mean, np.std, np.size,get_ci_lb,get_ci_ub]})\n",
    "\n",
    "iy=iy.reset_index()\n",
    "\n",
    "iy= pd.DataFrame(iy)\n",
    "\n",
    "iy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "id": "eaa14744",
   "metadata": {},
   "outputs": [],
   "source": [
    "cy20=cy[(cy['year']==2020)]\n",
    "cy21=cy[(cy['year']==2021)]\n",
    "\n",
    "cy20.columns\n",
    "cy20.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']\n",
    "cy21.columns\n",
    "cy21.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "id": "20ee513f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Continents 2020')"
      ]
     },
     "execution_count": 730,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(cy20['get_ci_lb'],cy20['get_ci_ub'],range(len(cy))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(cy20)),list(cy20['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Continent\")\n",
    "plt.title(\"Continents 2020\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "id": "d3fe52f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Continents 2021')"
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(cy21['get_ci_lb'],cy21['get_ci_ub'],range(len(cy))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(cy21)),list(cy21['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Continent\")\n",
    "plt.title(\"Continents 2021\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "id": "085ba1b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "ry20=ry[(ry['year']==2020)]\n",
    "ry21=ry[(ry['year']==2021)]\n",
    "\n",
    "ry20.columns\n",
    "ry20.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']\n",
    "ry21.columns\n",
    "ry21.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "id": "71004dca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Regions 2020')"
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(ry20['get_ci_lb'],ry20['get_ci_ub'],range(len(ry20))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(ry20)),list(ry20['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Region\")\n",
    "plt.title(\"Regions 2020\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "id": "67a19a3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Regions 2021')"
      ]
     },
     "execution_count": 734,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(ry21['get_ci_lb'],ry21['get_ci_ub'],range(len(ry21))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(ry21)),list(ry21['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Region\")\n",
    "plt.title(\"Regions 2021\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "id": "9e35d7b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "iy20=iy[(iy['year']==2020)]\n",
    "iy21=iy[(iy['year']==2021)]\n",
    "\n",
    "iy20.columns\n",
    "iy20.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']\n",
    "iy21.columns\n",
    "iy21.columns=['continent','year','mean','std','size','get_ci_lb','get_ci_ub']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "id": "5d6f5f0e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Income 2020')"
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(iy20['get_ci_lb'],iy20['get_ci_ub'],range(len(iy20))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(iy20)),list(iy20['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Income\")\n",
    "plt.title(\"Income 2020\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "id": "fc71e04d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Income 2021')"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "for lb,ub,y in zip(iy21['get_ci_lb'],iy21['get_ci_ub'],range(len(iy21))):\n",
    "    plt.plot((lb,ub),(y,y),'ro-')\n",
    "plt.yticks(range(len(iy21)),list(iy21['continent']))\n",
    "plt.xlabel(\"Ratio\")\n",
    "plt.ylabel(\"Income\")\n",
    "plt.title(\"Income 2021\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23285b71",
   "metadata": {},
   "source": [
    "#part 2 conclusion \n",
    "the previous code main theme was to analyse  the ratio between cases and deaths in 2020 and in 2021, and compare them with respect to 3 aspects, income, region, and continent as possible reasons of infection versus deaths. For all areas of the graph, the ratio in 2020 is less than 0.05 in all aspects. In 2021, however, the ratio declines in all aspects and sub-aspects. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
